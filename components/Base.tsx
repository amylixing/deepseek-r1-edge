'use client';

import React, {
  useState,
  useRef,
  useLayoutEffect,
  useEffect,
  useCallback,
} from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import debounce from 'lodash/debounce';

interface MessageContent {
  content: string;
  think?: string;
}

interface Message {
  role: 'user' | 'assistant';
  content: string;
  think?: string;
  source?: { title: string; url: string }[];
}

interface KeywordButton {
  text: string;
  query: string;
}

const ThinkDrawer = ({
  content,
  t,
}: {
  content: string;
  t: (en: string) => string;
}) => {
  const [isOpen, setIsOpen] = useState(true);
  const initializedRef = useRef<boolean>(false);

  useEffect(() => {
    if (!initializedRef.current) {
      setIsOpen(true);
      initializedRef.current = true;
    }
  }, []);

  if (!content.trim()) return null;

  return (
    <div className="mb-2">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center w-full px-3 py-2 text-sm text-yellow-800 bg-yellow-50 rounded-t-lg hover:bg-yellow-100 transition-colors"
      >
        <svg className="w-4 h-4 mr-2 text-yellow-400" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" d="M12 2a7 7 0 0 0-4 12.9V17a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-2.1A7 7 0 0 0 12 2zm0 16v2m-2 0h4" />
        </svg>
        <svg
          className={`w-4 h-4 mr-2 transition-transform ${
            isOpen ? 'transform rotate-90' : ''
          }`}
          fill="currentColor"
          viewBox="0 0 20 20"
        >
          <path
            fillRule="evenodd"
            d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
            clipRule="evenodd"
          />
        </svg>
        {t('Thinking Process')}
      </button>
      {isOpen && (
        <div className="p-3 text-sm text-yellow-900 bg-yellow-50 rounded-b-lg border-l-4 border-yellow-300" style={{fontFamily:'inherit',lineHeight:'1.7'}}>
          <ReactMarkdown remarkPlugins={[remarkGfm]}>{content}</ReactMarkdown>
        </div>
      )}
    </div>
  );
};

export const Base = () => {
  const [userInput, setUserInput] = useState('Hi');
  const [useNetwork, setUseNetwork] = useState(false);
  const [showKeywords, setShowKeywords] = useState(true);
  const [isMobile, setIsMobile] = useState(false);
  const [isClient, setIsClient] = useState(false);
  const [answered, setAnswered] = useState(false);
  const [isSearching, setIsSearching] = useState(false);
  const messageRef = useRef<HTMLDivElement>(null);
  const [isSiteEnv, setIsSiteEnv] = useState(false);
  const [isStreaming, setIsStreaming] = useState(false);
  const abortControllerRef = useRef<AbortController | null>(null);

  useEffect(() => {
    setIsSiteEnv(window.location.href.includes('.site'));
    setIsClient(true);
  }, []);

  const t = (en: string) => {
    const map: { [key: string]: string } = {
      'How to write Amazon product titles for wireless earphones with ANC and 40h battery life?':
        '为带有主动降噪和40小时续航的无线耳机写产品标题',
      'Generate a professional email template to handle customer complaints about product quality':
        '生成一个处理产品质量客户投诉的专业邮件模板',
      'Help optimize Python code for quick sort algorithm with time complexity analysis':
        '帮助优化快速排序算法的Python代码并分析时间复杂度',
      'Create a comparison table of marketing strategies between TikTok and Instagram Reels':
        '创建抖音和Instagram Reels营销策略的对比表',
      'DeepSeek R1 on the Edge': 'DeepSeek R1 边缘计算',
      'EdgeOne AI is transforming user experience and operational efficiency by performing AI computations closer to end-users, ensuring ultra-low latency and consistently high performance.':
        'EdgeOne AI 通过在靠近终端用户的地方执行 AI 计算，提升用户体验和运营效率，确保超低延迟和稳定的高性能。',
      'Available for free on ': '可在 EdgeOne Pages 免费使用',
      'Thinking Process': '思考过程',
      Processing: '处理中',
      'Generated by EdgeOne AI': '由 EdgeOne AI 生成',
      'Type a message...': '请输入消息...',
      'Network: On': '联网：已开启',
      'Network: Off': '联网：已关闭',
      References: '参考资料',
      Stop: '停止',
    };
    return map[en] || en;
  };

  const KEYWORD_BUTTONS: KeywordButton[] = [
    {
      text: '帮我写一份请假条',
      query: '帮我写一份请假条',
    },
    {
      text: '帮我生成一份购物清单',
      query: '帮我生成一份购物清单',
    },
    {
      text: '今天北京天气怎么样',
      query: '今天北京天气怎么样',
    },
    {
      text: '写一句生日祝福',
      query: '写一句生日祝福',
    },
  ];

  useLayoutEffect(() => {
    setIsClient(true);
    setIsMobile(window.innerWidth < 640);

    const handleResize = () => {
      setIsMobile(window.innerWidth < 640);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const onEdgeOneAIBtnClick = () => {
    if (isSiteEnv) {
      window.open(
        'https://edgeone.cloud.tencent.com/pages/document/169925463311781888',
        '_blank'
      );
      return;
    }
    window.open('http://edgeone.ai/document/169927753925951488', '_blank');
  };

  const onGithubBtnClick = () => {
    if (isSiteEnv) {
      window.open(
        'https://github.com/TencentEdgeOne/pages-templates/blob/main/examples/deepseek-r1-edge/README_zh-CN.md',
        '_blank'
      );
      return;
    }
    window.open(
      'https://github.com/TencentEdgeOne/pages-templates/tree/main/examples/deepseek-r1-edge',
      '_blank'
    );
  };

  const onDeployBtnClick = () => {
    if (isSiteEnv) {
      window.open(
        'https://console.cloud.tencent.com/edgeone/pages/new?from=github&template=deepseek-r1-edge',
        '_blank'
      );
      return;
    }
    window.open(
      'https://edgeone.ai/pages/templates/deepseek-r1-edge',
      '_blank'
    );
  };

  const getDisplayButtons = () => {
    if (isMobile) {
      const randomIndex = Math.floor(Math.random() * KEYWORD_BUTTONS.length);
      return [KEYWORD_BUTTONS[randomIndex]];
    }
    return KEYWORD_BUTTONS;
  };

  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const handleKeywordClick = (query: string) => {
    setUserInput(query);
    setShowKeywords(false);
    setTimeout(() => {
      handleSubmit({ preventDefault: () => {} } as React.FormEvent);
    });
  };

  const debouncedUpdateMessage = useCallback(
    debounce((updateFn: (prev: Message[]) => Message[]) => {
      setMessages(updateFn);
    }, 50),
    []
  );

  const processStreamResponse = async (
    response: Response,
    updateMessage: (content: MessageContent) => void
  ) => {
    const contentType = response.headers.get('content-type');
    if (contentType && contentType.includes('application/json')) {
      setIsSearching(false);
      const errorData = await response.json();
      return updateMessage({
        content:
          errorData?.error || 'Sorry, something went wrong. Please try again.',
      });
    }

    const reader = response.body!.getReader();
    const decoder = new TextDecoder();
    let buffer = '';

    let accumulatedContent = '';
    let accumulatedThink = '';
    let thinking = false;

    setIsStreaming(true);

    try {
      while (true) {
        const { value, done } = await reader.read();
        if (done) break;

        buffer += decoder.decode(value, { stream: true });
        const lines = buffer.split('\n');
        buffer = lines.pop() || '';

        for (const line of lines) {
          if (
            !line.trim() ||
            line.includes('[DONE]') ||
            !line.includes('data: ')
          )
            continue;
          try {
            const json = JSON.parse(line.replace(/^data: /, ''));
            const token = json.choices[0]?.delta?.content || '';
            const reasoningToken =
              json.choices[0]?.delta?.reasoning_content || '';

            // Turn off searching indicator when first token arrives
            if (isSearching) {
              setIsSearching(false);
            }

            // Handle think content
            if (
              token.includes('<think>') ||
              token.includes('\u003cthink\u003e')
            ) {
              thinking = true;
              continue;
            }
            if (
              token.includes('</think>') ||
              token.includes('\u003c/think\u003e')
            ) {
              thinking = false;
              continue;
            }

            if (thinking || reasoningToken) {
              accumulatedThink += token || reasoningToken || '';
            } else {
              accumulatedContent += token || '';
            }

            updateMessage({
              content: accumulatedContent,
              think: accumulatedThink,
            });
          } catch (e) {
            console.error('Failed to parse chunk:', e);
          }
        }
      }
    } catch (error: unknown) {
      if (error instanceof Error && error.name === 'AbortError') {
        console.log('Stream aborted by user');
      } else {
        console.error('Stream error:', error);
      }
    } finally {
      setIsStreaming(false);
    }
  };

  const handleStopResponse = () => {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
      abortControllerRef.current = null;
      setIsLoading(false);
      setIsStreaming(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!userInput.trim() || isLoading) return;

    // If already streaming, stop the current response
    if (isStreaming) {
      handleStopResponse();
      return;
    }

    setShowKeywords(false);
    setIsLoading(true);
    setIsSearching(true);
    const currentInput = textareaRef.current?.value || '';
    setUserInput('');

    // Create conversation history
    let conversationHistory = [...messages];

    if (messages[0]?.role === 'assistant') {
      setMessages([]);
      conversationHistory = [];
    }

    // Add new user message
    conversationHistory.push({ role: 'user', content: currentInput });

    // Add empty assistant message that will be streamed
    setMessages([...conversationHistory, { role: 'assistant', content: '' }]);

    setTimeout(() => {
      messageRef.current?.scrollTo(0, messageRef.current?.scrollHeight);
    }, 300);

    try {
      const url =
        process.env.NODE_ENV === 'development'
          ? process.env.NEXT_PUBLIC_BASE_URL!
          : '/v1/chat/completions';

      // Create a new AbortController for this request
      abortControllerRef.current = new AbortController();
      const signal = abortControllerRef.current.signal;

      const res = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          messages: conversationHistory.map((msg) => ({
            role: msg.role,
            content: msg.content,
          })),
          network: useNetwork,
        }),
        signal, // Attach the signal to the fetch request
      });

      if (!res.ok) {
        throw new Error(res.statusText);
      }

      setAnswered(true);

      let source: { url: string; title: string }[] = [];
      res.headers.forEach((value, name) => {
        if (name === 'results') {
          const results = JSON.parse(value);
          source = results.map((result: { url: string; title: string }) => {
            return {
              url: result.url,
              title: decodeURIComponent(result.title),
            };
          });
        }
      });

      setMessages((prev) => {
        const newMessages = structuredClone(prev);
        const lastMessage = newMessages[newMessages.length - 1];
        lastMessage.source = source;
        return newMessages;
      });

      await processStreamResponse(res, (_content: MessageContent) => {
        debouncedUpdateMessage((prev) => {
          const newMessages = structuredClone(prev);
          const lastMessage = newMessages[newMessages.length - 1];

          if (_content.think) {
            lastMessage.think = _content.think;
          }
          if (_content.content) {
            lastMessage.content = _content.content;
          }

          return newMessages;
        });
      });
    } catch (error: unknown) {
      if (!(error instanceof Error) || error.name !== 'AbortError') {
        console.error('Error:', error);
        setMessages((prev) => [
          ...prev.slice(0, -1),
          {
            role: 'assistant',
            content: 'Sorry, something went wrong. Please try again.',
          },
        ]);
      }
    } finally {
      setIsLoading(false);
      abortControllerRef.current = null;
    }
  };

  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setUserInput(e.target.value);
    if (textareaRef.current) {
      textareaRef.current.style.height = 'auto';
      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;
    }
  };

  const Loading = () => {
    return (
      <div className="flex items-center gap-2">
        <div className="w-1.5 h-1.5 bg-blue-500/60 rounded-full animate-pulse"></div>
        <div className="w-1.5 h-1.5 bg-blue-500/60 rounded-full animate-pulse delay-150"></div>
        <div className="w-1.5 h-1.5 bg-blue-500/60 rounded-full animate-pulse delay-300"></div>
      </div>
    );
  };

  const WelcomeMessage = ({ show }: { show: boolean }) => {
    if (!show) return null;

    return (
      <div className="flex flex-col items-center justify-center min-h-[50vh]">
        <div className="max-w-3xl px-4 mx-auto text-center mt-32">
          <style jsx>{`
            .scrolling-gradient {
              background: linear-gradient(270deg, #3b82f6, #a21caf, #ec4899, #3b82f6);
              background-size: 600% 600%;
              -webkit-background-clip: text;
              -webkit-text-fill-color: transparent;
              animation: gradientScroll 6s ease infinite;
            }
            @keyframes gradientScroll {
              0% { background-position: 0% 50%; }
              50% { background-position: 100% 50%; }
              100% { background-position: 0% 50%; }
            }
          `}</style>
          <h2 className="mb-6 text-7xl font-extrabold scrolling-gradient">
            先问AI
          </h2>
          <div className="mb-8 text-gray-400 text-2xl text-center">遇事困难，先问AI</div>
        </div>
      </div>
    );
  };

  const SearchingIndicator = () => {
    if (!isSearching) return null;

    return (
      <div className="mb-2">
        <div className="flex items-center justify-center w-full px-3 py-2 text-sm text-gray-600 bg-white rounded-lg shadow-sm border border-gray-100">
          <svg
            className="w-4 h-4 mr-2 animate-spin"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              className="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              strokeWidth="4"
            ></circle>
            <path
              className="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            ></path>
          </svg>
          {t('Processing')}
        </div>
      </div>
    );
  };

  const GeneratedByAI = () => {
    if (!answered) {
      return null;
    }
    return (
      <div className="mb-4 text-sm text-gray-400">
        {' '}
        {t('Generated by EdgeOne AI')}
      </div>
    );
  };

  const Source = ({
    sources,
  }: {
    sources?: { url: string; title: string }[];
  }) => {
    const [isOpen, setIsOpen] = useState(true);

    if (!sources?.length) return null;

    return (
      <div className="mb-2">
        <button
          onClick={() => setIsOpen(!isOpen)}
          className="flex items-center w-full px-3 py-2 text-sm text-yellow-800 bg-yellow-50 rounded-t-lg hover:bg-yellow-100 transition-colors"
        >
          <svg className="w-4 h-4 mr-2 text-yellow-400" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" d="M12 2a7 7 0 0 0-4 12.9V17a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1v-2.1A7 7 0 0 0 12 2zm0 16v2m-2 0h4" />
          </svg>
          <svg
            className={`w-4 h-4 mr-2 transition-transform ${
              isOpen ? 'transform rotate-90' : ''
            }`}
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fillRule="evenodd"
              d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
              clipRule="evenodd"
            />
          </svg>
          {t('References')} ({sources.length})
        </button>
        {isOpen && (
          <div className="p-3 space-y-2 text-sm bg-yellow-50 rounded-b-lg">
            {sources.map((source, index) => (
              <a
                key={index}
                onClick={(e) => {
                  e.preventDefault();
                  window.open(source.url, '_blank');
                }}
                className="block text-blue-600 cursor-pointer hover:text-blue-800 hover:underline"
              >
                {index + 1}. {source.title}
              </a>
            ))}
          </div>
        )}
      </div>
    );
  };

  return (
    isClient && (
      <div className="flex flex-col h-screen bg-white">
        {/* Header */}
        <header className="sticky top-0 z-50 flex items-center px-1 py-3 bg-white/80 shadow-md backdrop-blur-md">
          <div className="flex items-center justify-start w-full" style={{paddingLeft: '0px'}}>
            {/* 品牌 icon，示例为简洁 AI 闪电图标 */}
            <svg className="w-7 h-7 text-blue-600" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" d="M13 2L3 14h9l-1 8L21 10h-8l1-8z" />
            </svg>
            <span className="text-xl font-bold text-blue-600">先问AI</span>
            <span className="mx-2 text-gray-300">|</span>
            <span className="text-base text-gray-700">遇事困难，先问AI</span>
          </div>
        </header>

        <WelcomeMessage show={showKeywords} />

        {/* Messages section */}
        <div
          ref={messageRef}
          className="flex-1 px-4 py-4 overflow-y-auto md:px-6"
        >
          <div className="max-w-3xl mx-auto space-y-6">
            {messages.map((message, index) => (
              <div
                key={index}
                className={`flex items-start ${
                  message.role === 'user' ? 'justify-end' : 'justify-start'
                }`}
              >
                {/* AI回复时，若有思考过程，单独展示在气泡上方 */}
                {message.role === 'assistant' && message.think && (
                  <div className="w-full max-w-[100%] mb-1">
                    <ThinkDrawer content={message.think} t={t} />
                  </div>
                )}
                <div
                  className={`relative max-w-[100%] px-4 py-3 rounded-md text-sm ${
                    message.role === 'user'
                      ? 'bg-gray-200 text-black'
                      : 'bg-blue-50 text-gray-800 border-l-4 border-blue-200'
                  }`}
                >
                  {/* AI回复内容 */}
                  {message.role === 'user' && (
                    <p className="whitespace-pre-wrap">{message.content}</p>
                  )}
                  {message.role === 'assistant' && (
                    <div
                      className="prose max-w-none prose-p:leading-relaxed prose-pre:bg-blue-50 prose-pre:border prose-pre:border-blue-200 prose-code:text-blue-600 prose-code:bg-blue-50 prose-code:px-1 prose-code:py-0.5 prose-code:rounded prose-code:before:content-none prose-code:after:content-none prose-strong:text-gray-900 prose-a:text-blue-600 prose-a:no-underline hover:prose-a:no-underline prose-headings:text-gray-900 prose-ul:my-4 prose-li:my-0.5 text-xs"
                    >
                      {/* <GeneratedByAI /> */}
                      {message.source && <Source sources={message.source} />}
                      {message.role === 'assistant' &&
                        index === messages.length - 1 &&
                        isSearching &&
                        !message.content &&
                        !message.think && <SearchingIndicator />}
                      <ReactMarkdown
                        remarkPlugins={[remarkGfm]}
                        components={{
                          code({ node, className, children, ...props }) {
                            const match = /language-(\w+)/.exec(
                              className || ''
                            );
                            return true ? (
                              <pre className="p-4 overflow-auto bg-blue-50 rounded-lg">
                                <code className={className} {...props}>
                                  {children}
                                </code>
                              </pre>
                            ) : (
                              <code className={className} {...props}>
                                {children}
                              </code>
                            );
                          },
                          a: ({ node, ...props }) => (
                            <a
                              {...props}
                              target="_blank"
                              className="text-blue-600 hover:text-blue-800 "
                            />
                          ),
                        }}
                      >
                        {message.content}
                      </ReactMarkdown>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {showKeywords && (
          <div className="px-4 bg-white animate-fade-in">
            <div className="max-w-3xl mx-auto mb-4">
              <div className="grid grid-cols-1 gap-2 p-2 rounded-lg sm:grid-cols-2 mt-20" style={{marginTop: '48px'}}>
                {getDisplayButtons().map((button) => (
                  <button
                    key={button.text}
                    onClick={() => handleKeywordClick(button.query)}
                    className="flex items-center px-3 py-2 text-sm text-left text-gray-400 transition-colors duration-200 bg-white border border-gray-200 rounded-md hover:text-black hover:bg-gray-100"
                  >
                    <span className="flex-1">{button.text}</span>
                    <svg className="w-4 h-4 ml-2" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" d="M9 5l7 7-7 7" />
                    </svg>
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Input section */}
        <div className="px-4 bg-white">
          <form onSubmit={handleSubmit} className="max-w-3xl py-4 mx-auto">
            <style jsx>{`
              .blue-breath {
                box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.7);
                animation: blueBreath 2.5s infinite alternate;
                transition: box-shadow 0.3s;
              }
              @keyframes blueBreath {
                0% {
                  box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.3);
                }
                100% {
                  box-shadow: 0 0 16px 8px rgba(59, 130, 246, 0.7);
                }
              }
            `}</style>
            <div className="flex flex-col overflow-hidden border border-gray-200 rounded-xl blue-breath">
              <textarea
                ref={textareaRef}
                value={userInput}
                onChange={handleTextareaChange}
                placeholder={t('Type a message...')}
                disabled={isLoading}
                className={`w-full bg-white text-gray-900 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500/50 resize-none min-h-[52px] max-h-[200px] placeholder:text-gray-400 border-none ${
                  isLoading ? 'cursor-not-allowed opacity-50' : ''
                } sm:min-h-[52px] sm:max-h-[200px] sm:text-base min-h-[40px] max-h-[120px] text-sm`}
                onCompositionStart={(e) => {
                  (e.target as HTMLTextAreaElement).dataset.composing = 'true';
                }}
                onCompositionEnd={(e) => {
                  (e.target as HTMLTextAreaElement).dataset.composing = 'false';
                }}
                onKeyDown={(e) => {
                  const target = e.target as HTMLTextAreaElement;
                  const isComposing = target.dataset.composing === 'true';
                  if (e.key === 'Enter' && !e.shiftKey && !isComposing) {
                    e.preventDefault();
                    handleSubmit(e);
                  }
                }}
              />
              <div className="flex items-center justify-between gap-2 px-4 py-2 bg-gray-50">
                <div>
                  <button
                    type="button"
                    onClick={() => setUseNetwork(!useNetwork)}
                    className={`flex items-center px-2 py-1.5 rounded-lg text-sm ${
                      useNetwork
                        ? 'bg-blue-50 text-blue-600'
                        : 'bg-gray-100 text-gray-600'
                    }`}
                  >
                    <svg
                      className="w-4 h-4 mr-1"
                      fill="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-1 17.93c-3.95-.49-7-3.85-7-7.93 0-.62.08-1.21.21-1.79L9 15v1c0 1.1.9 2 2 2v1.93zm6.9-2.54c-.26-.81-1-1.39-1.9-1.39h-1v-3c0-.55-.45-1-1-1H8v-2h2c.55 0 1-.45 1-1V7h2c1.1 0 2-.9 2-2v-.41c2.93 1.19 5 4.06 5 7.41 0 2.08-.8 3.97-2.1 5.39z" />
                    </svg>
                    {useNetwork ? t('Network: On') : t('Network: Off')}
                  </button>
                </div>
                <div>
                  <button
                    type={isStreaming ? 'button' : 'submit'}
                    onClick={isStreaming ? handleStopResponse : undefined}
                    disabled={
                      (isLoading && !isStreaming) ||
                      (!userInput.trim() && !isStreaming)
                    }
                    className={`flex items-center justify-center w-8 h-8 rounded-lg transition-all duration-200 ${
                      (isLoading && !isStreaming) ||
                      (!userInput.trim() && !isStreaming)
                        ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                        : isStreaming
                        ? 'bg-red-500 text-white hover:bg-red-600 hover:shadow-md active:transform active:scale-95'
                        : 'bg-blue-500 text-white hover:bg-blue-600 hover:shadow-md active:transform active:scale-95'
                    }`}
                  >
                    {isStreaming ? (
                      <svg
                        className="w-4 h-4"
                        fill="currentColor"
                        viewBox="0 0 20 20"
                      >
                        <path
                          fillRule="evenodd"
                          d="M10 18a8 8 0 100-16 8 8 0 000 16zM8 7a1 1 0 00-1 1v4a1 1 0 001 1h4a1 1 0 001-1V8a1 1 0 00-1-1H8z"
                          clipRule="evenodd"
                        />
                      </svg>
                    ) : (
                      <svg
                        className="w-4 h-4"
                        fill="none"
                        stroke="currentColor"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth={2}
                          d="M5 12h14m-4 4l4-4-4-4"
                        />
                      </svg>
                    )}
                  </button>
                </div>
              </div>
            </div>
          </form>
        </div>
      </div>
    )
  );
};
